"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[524],{7522:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var i=n(9901);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),l=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return i.createElement(p.Provider,{value:t},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},g=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),c=l(n),g=r,m=c["".concat(p,".").concat(g)]||c[g]||u[g]||a;return n?i.createElement(m,o(o({ref:t},d),{},{components:n})):i.createElement(m,o({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=g;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s[c]="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=n[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}g.displayName="MDXCreateElement"},2226:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>b,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var i=n(3223),r=(n(9901),n(7522));const a={sidebar_label:"@twa-dev/bridge",sidebar_position:1},o="@twa-dev/bridge",s={unversionedId:"libraries/twa-dev-bridge",id:"libraries/twa-dev-bridge",title:"@twa-dev/bridge",description:"The package provides utilities to simplify communication between web",source:"@site/docs/libraries/twa-dev-bridge.mdx",sourceDirName:"libraries",slug:"/libraries/twa-dev-bridge",permalink:"/docs/libraries/twa-dev-bridge",draft:!1,editUrl:"https://github.com/twa-dev/docs/tree/master/docs/libraries/twa-dev-bridge.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"@twa-dev/bridge",sidebar_position:1},sidebar:"sidebar",previous:{title:"Creating new app",permalink:"/docs/guides/creating-new-app"}},p={},l=[{value:"Installation",id:"installation",level:2},{value:"Init",id:"init",level:2},{value:"Debugging",id:"debugging",level:3},{value:"Target origin",id:"target-origin",level:3},{value:"Calling methods",id:"calling-methods",level:2},{value:"With <code>Bridge</code>",id:"with-bridge",level:3},{value:"Without <code>Bridge</code>",id:"without-bridge",level:3},{value:"Listening to events",id:"listening-to-events",level:2},{value:"Checking method support",id:"checking-method-support",level:2}],d=e=>function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)},c=d("LibraryBadges"),u=d("NpmInstall"),g={toc:l},m="wrapper";function b(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,i.Z)({},g,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"twa-devbridge"},"@twa-dev/bridge"),(0,r.kt)(c,{pkg:"@twa-dev/bridge",mdxType:"LibraryBadges"}),(0,r.kt)("p",null,"The package provides utilities to simplify communication between web\napplications and the Telegram native application. It also addresses\ncross-platform data differences, safeguarding developers' code and saving their time."),(0,r.kt)("p",null,"Developers can utilize this package to create their software development\nkit (SDK), as it offers the utmost level of control over\ncross-application communication."),(0,r.kt)("h2",{id:"installation"},"Installation"),(0,r.kt)(u,{pkg:"@twa-dev/bridge",mdxType:"NpmInstall"}),(0,r.kt)("h2",{id:"init"},"Init"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"Bridge")," component has a relatively simple API. Its primary purpose is\nto provide a communication layer between the Telegram native and client\napplications, allowing you to invoke native methods and receive events from\nthe Telegram application."),(0,r.kt)("p",null,"To start using Bridge, simply utilize its static ",(0,r.kt)("inlineCode",{parentName:"p"},"init")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Bridge} from '@twa-dev/bridge';\n\nconst bridge = Bridge.init();\n")),(0,r.kt)("p",null,"This function will append special handler to global window object, which is\nused by Telegram native application and make this instance work correctly."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"Bridge.init()")," as many times as required. This will not make\nany effect on already created ",(0,r.kt)("inlineCode",{parentName:"p"},"Bridge")," instances.")),(0,r.kt)("h3",{id:"debugging"},"Debugging"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Bridge")," supports debug mode which outputs additional log messages into the\nconsole. By default, this mode is disabled. To enable it, it is required to\npass the ",(0,r.kt)("inlineCode",{parentName:"p"},"debug: true")," option while creating a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Bridge")," instance."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Bridge} from '@twa-dev/bridge';\n\nconst bridge = Bridge.init({debug: true});\n")),(0,r.kt)("p",null,"Or in case when an instance already exists, just change its ",(0,r.kt)("inlineCode",{parentName:"p"},"debug")," property\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Bridge} from '@twa-dev/bridge';\n\nconst bridge = Bridge.init({debug: true});\nbridge.debug = true;\n")),(0,r.kt)("h3",{id:"target-origin"},"Target origin"),(0,r.kt)("p",null,"If the current bridge instance is being used in a browser environment (iframe),\nwe employ the function ",(0,r.kt)("inlineCode",{parentName:"p"},"window.parent.postMessage"),". This function requires\nspecifying the target origin to ensure events are only sent to trusted\nparent iframes. By default, the bridge utilizes ",(0,r.kt)("inlineCode",{parentName:"p"},"https://web.telegram.org"),"\nas the origin. To enable event transmission to other origins, you should\nutilize the ",(0,r.kt)("inlineCode",{parentName:"p"},"targetOrigin")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"const unsafeBridge = Bridge.init({targetOrigin: '*'});\n// or\nconst safeBridge = Bridge.init({targetOrigin: 'https://myendpoint.org'});\n")),(0,r.kt)("p",null,"It is strongly recommended not to override this value as long as it could lead\nto security issues. Specify this value only for test purposes."),(0,r.kt)("h2",{id:"calling-methods"},"Calling methods"),(0,r.kt)("h3",{id:"with-bridge"},"With ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bridge")),(0,r.kt)("p",null,"To call Web Apps methods, it is enough to call ",(0,r.kt)("inlineCode",{parentName:"p"},"Bridge"),"s ",(0,r.kt)("inlineCode",{parentName:"p"},"postEvent")," method.\nThis method automatically finds a correct way of sending events which depends\non the current environment. Let's take a look at a simple example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Bridge} from '@twa-dev/bridge';\n\nconst bridge = Bridge.init();\n\n// Close current application.\nbridge.postEvent('web_app_close');\n")),(0,r.kt)("p",null,"Some methods don't require parameters and can be called without an additional\nsecond parameter representing the event payload. But some events do require it:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {Bridge} from '@twa-dev/bridge';\n\nconst bridge = Bridge.init();\n\n// Open new popup.\nbridge.postEvent('web_app_open_popup', {\n  title: 'Web Apps Notification',\n  message: 'I love Web Apps',\n  buttons: [{type: 'ok', id: 'ok'}]\n});\n")),(0,r.kt)("h3",{id:"without-bridge"},"Without ",(0,r.kt)("inlineCode",{parentName:"h3"},"Bridge")),(0,r.kt)("p",null,"This package allows calling methods without creating a new ",(0,r.kt)("inlineCode",{parentName:"p"},"Bridge")," instance.\nTo perform this action, you should use the ",(0,r.kt)("inlineCode",{parentName:"p"},"postEvent")," function which has the\nsame type as ",(0,r.kt)("inlineCode",{parentName:"p"},"bridge.postEvent")," (actually, the bridge uses the ",(0,r.kt)("inlineCode",{parentName:"p"},"postEvent"),"\nfunction internally):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {postEvent} from '@twa-dev/bridge';\n\npostEvent('web_app_setup_back_button', {is_visible: true});\n")),(0,r.kt)("p",null,"Nevertheless, sometimes you need to handle events sent from the native app\nemitted as a response to the called method. For example, you would like to\ncall the ",(0,r.kt)("inlineCode",{parentName:"p"},"web_app_request_theme")," method. As a result, the native app will\nemit a ",(0,r.kt)("inlineCode",{parentName:"p"},"theme_changed")," event. Using the default bridge init flow, this event\nwill be captured by the bridge instance. We can't say the same about the bare\n",(0,r.kt)("inlineCode",{parentName:"p"},"postEvent")," function, so, do not forget about the response event (if it exists)\nhandling process."),(0,r.kt)("h2",{id:"listening-to-events"},"Listening to events"),(0,r.kt)("p",null,"Events tracking is rather simple thing too. For this purpose, we could\nuse such methods as ",(0,r.kt)("inlineCode",{parentName:"p"},"on")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"subscribe"),". To remove event listeners, we\nuse ",(0,r.kt)("inlineCode",{parentName:"p"},"off")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"unsubscribe"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {BridgeEventListener, BridgeEventName, Bridge} from '@twa-dev/bridge';\n\nconst bridge = Bridge.init();\nconst listener: BridgeEventListener<'viewport_changed'> = payload => {\n  console.log('Viewport changed:', payload)\n};\nconst subListener = (event: BridgeEventName, ...args: any[]) => {\n  console.log('Event was called:', event, ...args);\n};\n\n// Add event listener.\nbridge.on('viewport_changed', listener);\n\n// Add listener for all events.\nbridge.subscribe(subListener);\n\n// Remove event listeners.\nbridge.off('viewport_changed', listener);\nbridge.unsubscribe(subListener);\n")),(0,r.kt)("h2",{id:"checking-method-support"},"Checking method support"),(0,r.kt)("p",null,"Bridge itself does not check if the Web Apps method is supported by the current\nversion of the platform. To check, if the method is supported, you could use\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"supports")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-typescript"},"import {supports} from '@twa-dev/bridge';\n\nsupports('web_app_trigger_haptic_feedback', '6.0'); // false\nsupports('web_app_trigger_haptic_feedback', '6.1'); // true\n")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"It is recommended to use this function before calling Web Apps methods to\nprevent applications from stalling and other unexpected behavior.")))}b.isMDXComponent=!0}}]);